{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"La Crypte du Souffle Vital","text":""},{"location":"#presentation-du-projet","title":"Pr\u00e9sentation du Projet","text":"<p>Tu avances prudemment dans une crypte ancienne, o\u00f9 l'air est lourd et charg\u00e9 d'un silence inqui\u00e9tant. Devant toi, un autel de pierre recouvert de symboles oubli\u00e9s. Au centre repose un myst\u00e9rieux artefact qui semble endormi: un petit cristal reli\u00e9 \u00e0 une \u00e9trange bo\u00eete sonore. Tu t'approches et lis l'inscription grav\u00e9e sur la pierre: \"Seul le souffle des \u00e9toiles r\u00e9v\u00e9lera la m\u00e9lodie.\" Soudain, une faible lueur \u00e9mane du cristal. C'est un capteur ancien, con\u00e7u pour r\u00e9agir \u00e0 la temp\u00e9rature ambiante. Mais l'air br\u00fblant de la crypte l'a scell\u00e9 dans un \u00e9tat de dormance. Tu comprends alors: si tu peux refroidir l'artefact en soufflant dessus, il r\u00e9v\u00e9lera son chant sacr\u00e9...</p>"},{"location":"#fonctionnement","title":"Fonctionnement :","text":""},{"location":"#fonctionnement-du-defi","title":"Fonctionnement du d\u00e9fi","text":"<ul> <li>Le capteur DHT11 mesure la temp\u00e9rature en continu.</li> <li>Si Temp\u00e9rature &lt; 22\u00b0C \u2192 Le syst\u00e8me d\u00e9tecte l'anormalie.</li> <li>Le buzzer s'active pour jouer la m\u00e9lodie \"Fr\u00e8re Jacques\" pour indiquer que l'enigme est r\u00e9solu.</li> <li>Si la temp\u00e9rature est \u00e9lev\u00e9, rien ne se passe .</li> </ul>"},{"location":"#fonctionnement-du-bonus","title":"Fonctionnement du Bonus","text":"<ul> <li>Mode Temps Limit\u00e9: La temp\u00e9rature doit descendre sous 22\u00b0C en moins de 30 secondes, sinon la crypte se referme et la m\u00e9lodie est perdue!</li> <li>Mode Son Mystique : Ajoute une deuxi\u00e8me m\u00e9lodie cach\u00e9e qui ne se joue qu'\u00e0 20\u00b0C ou moins.</li> <li>Mode Indices Anciens: Affiche la temp\u00e9rature en direct sur le moniteur s\u00e9rie pour aider les aventuriers \u00e0 ajuster leur souffle.</li> <li>Mode Inverse: L'\u00c9preuve de la Flamme Sacr\u00e9e : Modifie le code pour d\u00e9tecter une temp\u00e9rature \u00e9lev\u00e9e (ex: frotter le capteur avec les doigts pour monter \u00e0 30\u00b0C et d\u00e9clencher une autre m\u00e9lodie).</li> </ul>"},{"location":"#liste-du-materiel","title":"Liste du Mat\u00e9riel","text":"Composant Mod\u00e8le Quantit\u00e9 Carte Arduino Arduino UNO 1 Capteur de temp\u00e9rature DHT11 1 Buzzer Buzzer passif 1 Breadboard - 1 Fils de connexion Jumpers Plusieurs"},{"location":"#caracteristiques-techniques","title":"Caract\u00e9ristiques Techniques","text":""},{"location":"#carte-arduino-uno","title":"Carte Arduino UNO","text":"<ul> <li>Microcontr\u00f4leur : ATmega328P  </li> <li>Tension de fonctionnement : 5V  </li> <li>Tension d'entr\u00e9e recommand\u00e9e : 7-12V  </li> <li>Courant max par broche d'E/S : 40 mA  </li> <li>Fr\u00e9quence d'horloge : 16 MHz  </li> </ul>"},{"location":"#capteur-de-temperature-dht11","title":"Capteur de Temp\u00e9rature DHT11","text":"<p> - Tension d'alimentation : 3.3V - 5V - Plage de temp\u00e9rature : 0\u00b0C \u00e0 50\u00b0C - Pr\u00e9cision : \u00b12\u00b0C - Plage d'humidit\u00e9 : 20% \u00e0 90% RH  </p>"},{"location":"#buzzer-passif","title":"Buzzer Passif","text":"<p> - Tension de fonctionnement : 3.3V - 5V - Courant nominal : 10-30 mA - Fr\u00e9quence de r\u00e9sonance : ~2 kHz  </p>"},{"location":"#breadboard-plaque-dessai","title":"Breadboard (Plaque d'essai)","text":"<p>  - Courant max par rang\u00e9e : 1A - Tension max : 300V  </p>"},{"location":"#fils-de-connexion-jumpers","title":"Fils de Connexion (Jumpers)","text":"<p> - Courant max support\u00e9 : 1-3A - Longueur : 10-30 cm  </p>"},{"location":"#logiciel-et-programmation","title":"Logiciel et Programmation","text":"<ul> <li>Logiciel : Arduino IDE</li> <li>Langage de programmation : Arduino (C++)</li> </ul>"},{"location":"#schemas","title":"Sch\u00e9mas","text":""},{"location":"#schema-electrique-du-projet","title":"Sch\u00e9ma \u00e9lectrique du projet","text":""},{"location":"#schema-synoptique-du-projet","title":"Sch\u00e9ma synoptique du projet","text":""},{"location":"#codes-arduino","title":"Codes Arduino","text":""},{"location":"#code-arduino-du-defis","title":"Code Arduino du D\u00e9fis","text":"<pre><code>#include &lt;dht11.h&gt;\n\n#define DHT11PIN 7\n#define SPEAKER_PIN 8\n\ndht11 DHT11;\n\n// Fr\u00e9quences des notes en Hz\n#define NOTE_DO  262\n#define NOTE_RE  294\n#define NOTE_MI  330\n#define NOTE_FA  349\n#define NOTE_SOL 392\n#define NOTE_LA  440\n\n// M\u00e9lodie \"Fr\u00e8re Jacques\"\nint melody[] = {\n  NOTE_DO, NOTE_RE, NOTE_MI, NOTE_DO,\n  NOTE_DO, NOTE_RE, NOTE_MI, NOTE_DO,\n  NOTE_MI, NOTE_FA, NOTE_SOL,\n  NOTE_MI, NOTE_FA, NOTE_SOL\n};\n\n// Dur\u00e9es des notes (en ms)\nint noteDurations[] = {500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1000, 500, 500, 1000};\n\nvoid playMelodyFJ() {\n  int length = sizeof(melody) / sizeof(melody[0]);\n  for (int i = 0; i &lt; length; i++) {\n    tone(SPEAKER_PIN, melody[i], noteDurations[i]);\n    delay(noteDurations[i] * 1.30);\n  }\n}\n\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(SPEAKER_PIN, OUTPUT);\n}\n\nvoid loop() {\n  float temperature = (float) DHT11.temperature;\n  Serial.print(\"Temp\u00e9rature (\u00b0C) : \");\n  Serial.println(temperature, 2);\n  delay(1000);\n\n  if (temperature &lt; 22) {\n    playMelodyFJ();\n  } else {\n    noTone(SPEAKER_PIN);\n  }\n}\n</code></pre>"},{"location":"#code-arduino-du-bonus","title":"Code Arduino du Bonus","text":"<pre><code>#include &lt;dht11.h&gt;\n#define DHT11PIN 7\n#define SPEAKER_PIN 8\n\ndht11 DHT11;\n\n// Fre\u0301quences des notes en Hz\n#define NOTE_DO  262\n#define NOTE_RE  294\n#define NOTE_MI  330\n#define NOTE_FA  349\n#define NOTE_SOL 392\n#define NOTE_LA  440\n\n// Me\u0301lodie de \"Fre\u0300re Jacques\"\nint melody[] = {\n  NOTE_DO, NOTE_RE, NOTE_MI, NOTE_DO,\n  NOTE_DO, NOTE_RE, NOTE_MI, NOTE_DO,\n  NOTE_MI, NOTE_FA, NOTE_SOL,\n  NOTE_MI, NOTE_FA, NOTE_SOL,\n  NOTE_SOL, NOTE_LA, NOTE_SOL, NOTE_FA, NOTE_MI, NOTE_DO,\n  NOTE_SOL, NOTE_LA, NOTE_SOL, NOTE_FA, NOTE_MI, NOTE_DO,\n  NOTE_DO, NOTE_SOL, NOTE_DO,\n  NOTE_DO, NOTE_SOL, NOTE_DO\n};\n\n// Dure\u0301es des notes (en ms)\nint noteDurations[] = {\n  500, 500, 500, 500,\n  500, 500, 500, 500,\n  500, 500, 1000,\n  500, 500, 1000,\n  250, 250, 250, 250, 500, 500,\n  250, 250, 250, 250, 500, 500,\n  250, 250, 500,\n  250, 250, 500\n};\n\n// Fre\u0301quences des notes\n#define NOTE1_DO  262\n#define NOTE1_RE  294\n#define NOTE1_MI  330\n#define NOTE1_FA  349\n#define NOTE1_SOL 392\n#define NOTE1_LA  440\n#define NOTE1_SI  494\n#define NOTE1_DO_HIGH  523  // Do de l'octave supe\u0301rieure\n\n// Me\u0301lodie \"Happy Birthday\"\nint melody1[] = {\n  NOTE1_SOL, NOTE1_SOL, NOTE1_LA, NOTE1_SOL, NOTE1_DO_HIGH, NOTE1_SI,\n  NOTE1_SOL, NOTE1_SOL, NOTE1_LA, NOTE1_SOL, NOTE1_RE, NOTE1_DO_HIGH,\n  NOTE1_SOL, NOTE1_SOL, NOTE1_SOL, NOTE1_MI, NOTE1_DO_HIGH, NOTE1_SI, NOTE1_LA,\n  NOTE1_FA, NOTE1_FA, NOTE1_MI, NOTE1_DO_HIGH, NOTE1_RE, NOTE1_DO_HIGH\n};\n\n// Dure\u0301es des notes (plus rapides)\nint noteDurations1[] = {\n  300, 300, 600, 600, 600, 900,\n  300, 300, 600, 600, 600, 900,\n  300, 300, 300, 300, 300, 300, 600,\n  300, 300, 300, 300, 600, 900\n};\n\n\n// Fre\u0301quences des notes\n#define NOTE2_DO  262\n#define NOTE2_RE  294\n#define NOTE2_MI  330\n#define NOTE2_FA  349\n#define NOTE2_SOL 392\n#define NOTE2_LA  440\n#define NOTE2_SI  494\n\n// Me\u0301lodie \"Au clair de la lune\"\nint melody2[] = {\n  NOTE2_DO, NOTE2_RE, NOTE2_MI, NOTE2_RE, NOTE2_DO,\n  NOTE2_MI, NOTE2_RE, NOTE2_RE, NOTE2_DO, NOTE2_DO,\n  NOTE2_RE, NOTE2_MI, NOTE2_RE, NOTE2_DO, NOTE2_MI,\n  NOTE2_RE, NOTE2_RE, NOTE2_DO, NOTE2_RE, NOTE2_RE,\n  NOTE2_RE, NOTE2_LA, NOTE2_LA, NOTE2_RE, NOTE2_DO,\n  NOTE2_SI, NOTE2_LA, NOTE2_SOL, NOTE2_DO, NOTE2_DO,\n  NOTE2_RE, NOTE2_MI, NOTE2_RE, NOTE2_DO, NOTE2_MI,\n  NOTE2_RE, NOTE2_RE, NOTE2_DO\n};\n\n// Dure\u0301es des notes (en millisecondes)\nint noteDurations2[] = {\n  500, 250, 250, 250, 700, // Premie\u0300re phrase\n  250, 250, 250, 250, 700, // Deuxie\u0300me phrase\n  250, 250, 250, 250, 250, // Troisie\u0300me phrase\n  250, 250, 250, 250, 700, // Quatrie\u0300me phrase\n  250, 250, 250, 250, 700, // Cinquie\u0300me phrase\n  250, 250, 250, 250, 700, // Sixie\u0300me phrase\n  250, 250, 250, 250, 700, // Septie\u0300me phrase\n  250, 250, 250, 250, 1000  // Huitie\u0300me phrase\n};\n\n\nvoid playMelodyAU() {\n  int length = sizeof(melody2) / sizeof(melody2[0]);\n  for (int i = 0; i &lt; length; i++) {\n    tone(SPEAKER_PIN, melody2[i], noteDurations2[i]);\n    delay(noteDurations2[i] * 1.30); // Pause entre les notes\n    float temperature = (float) DHT11.temperature;\n    Serial.print(\"Temperature (C): \");\n    Serial.println(temperature, 2);\n    if (temperature &lt; 30 ){\n      loop(); \n    }\n  }\n}\n\nvoid playMelodyHB() {\n  int length = sizeof(melody1) / sizeof(melody1[0]);\n  for (int i = 0; i &lt; length; i++) {\n    tone(SPEAKER_PIN, melody1[i], noteDurations1[i]);\n    delay(noteDurations1[i] * 1.20); // Pause re\u0301duite entre les notes\n  }\n}\n\nvoid playMelodyFJ() {\n  int length = sizeof(melody) / sizeof(melody[0]);\n  for (int i = 0; i &lt; length; i++) {\n    tone(SPEAKER_PIN, melody[i], noteDurations[i]);\n\n    delay(noteDurations[i] * 1.30); // Petite pause entre les notes\n  }\n   // Pause avant de rejouer la me\u0301lodie\n}\n\nvoid playMelody1() {\n  int length = sizeof(melody) / sizeof(melody[0]);\n  for (int i = 0; i &lt; length; i++) {\n    tone(SPEAKER_PIN, melody[i], noteDurations[i]);\n\n    delay(noteDurations[i] * 1.30); // Petite pause entre les notes\n    float temperature = (float) DHT11.temperature;\n    Serial.print(\"Temperature (C): \");\n    Serial.println(temperature, 2);\n    if (temperature &lt;= 20 ){\n      playMelodyHB();\n      break; \n    }\n\n  } \n}\n\n\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(SPEAKER_PIN, OUTPUT);\n}\n\nvoid loop() {\n  float temperature = (float) DHT11.temperature;\n  Serial.print(\"Temperature (C): \");\n  Serial.println(temperature, 2);\n  delay(1000);\n\n  if (temperature &lt; 22) {\n    playMelody1();\n  } else {\n    noTone(SPEAKER_PIN);\n  }\n  */\n  // BONUS mode inverse\n   float temperature = (float) DHT11.temperature;\n  Serial.print(\"Temperature (C): \");\n  Serial.println(temperature, 2);\n  delay(1000);\n\n  if (temperature &lt; 22) {\n    playMelody1();\n  } \n  else if (temperature &gt;= 30 ){\n    playMelodyAU();\n  }\n  else {\n    noTone(SPEAKER_PIN);\n  }\n\n  // \n}\n</code></pre>"},{"location":"#repos-github","title":"Repos Github","text":"<p>https://github.com/DgnSid/Crypte-du-souffle-vital.git</p>"}]}